Queries to support
1.	Write a query to add users to our database. Username while adding a new user should be unique.
 Query: db.meals.find({username: "bhaveshs"})

2.	Write a query to delete user from our database based on the username (bhaveshs).
Query: db.user.deleteOne({username: "bhaveshs"})
Response : { "acknowledged" : true, "deletedCount" : 1 }

3.	Write a query to update user fields like password, caloriesper_day, phone based on username(_bhaveshs).
Query :  db.user.updateOne({"username":"bhaveshs"},{
... $set:{"password":"9876543","calories_per_day":1200}
... }
... )
Response : { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
4.	Write a query to add a meal for a specific user based on the username (bhaveshs). Meal should have information as described in the meal object above.
Query : db.meals.insert({   "datetime":"2020-12-20T16:00:00Z
...    "food_name":"pasta", 
...    "calorie":300, 
...    "description":"Red Sauce Pasta",
...    "username": "bhaveshs" 
... })
Response : WriteResult({ "nInserted" : 1 })

5.	Write a query to delete meal based on _id (123).
Query : db.meals.deleteOne({"_id":"5fe370d5f3811bbf75c73f51" })
Response  : { "acknowledged" : true, "deletedCount" : 0 }
6.	Write a query to delete all meals for a specific user as identified by the username (bhaveshs).
Query : db.meals.deleteMany({“username” : “bhaveshs”})
	Response : {“acknowledged”:true,”deletedCount”: 5}
7.	Write a query to list all meals for a specific user (bhaveshs).
Query : db.meals.find({"username":"bhaveshs"})
Response : { "_id" : ObjectId("5fe370d5f3811bbf75c73f50"), "datetime" : "2020-12-20T16:00:00Z", "food_name" : "pasta", "calorie" : 300, "description" : "Red Sauce Pasta", "username" : "bhaveshs" }
{ "_id" : ObjectId("5fe370d5f3811bbf75c73f51"), "datetime" : "2020-12-21T16:00:00Z", "food_name" : " VEGAN CHICKPEA FRITTATA", "calorie" : 126, "description" : "Calories: 126; Total Fat: 4g; Saturated Fat: 1g; Monounsaturated Fat: 2g; Cholesterol: 0 mg", "username" : "bhaveshs" }
{ "_id" : ObjectId("5fe370d5f3811bbf75c73f52"), "datetime" : "2020-12-22T16:00:00Z", "food_name" : "KETO WALNUT-CASHEW", "calorie" : 291, "description" : "Total Fat: 20g; Saturated Fat: 3g; Monounsaturated Fat: 6g; Cholesterol: 0mg; Sodium: 60mg;", "username" : "bhaveshs" }
{ "_id" : ObjectId("5fe370d5f3811bbf75c73f53"), "datetime" : "2020-12-19T16:00:00Z", "food_name" : " PUMPKIN PIE", "calorie" : 284, "description" : "Total Fat: 5g; Saturated Fat: 1g; Monounsaturated Fat: 1g; Cholesterol: 8mg; Sodium: 231mg; ", "username" : "bhaveshs" }
{ "_id" : ObjectId("5fe370d5f3811bbf75c73f54"), "datetime" : "2020-12-20T16:00:00Z", "food_name" : "SAVORY SWEET POTATO", "calorie" : 200, "description" : "Saturated Fat: 1g; Monounsaturated Fat: 4g; Cholesterol: 0mg; Sodium: 196mg; Carbohydrate: 31g; ", "username" : "bhaveshs" }
{ "_id" : "123", "datetime" : "2020-12-20T16:00:00Z", "food_name" : "pasta", "calorie" : 300, "description" : "Red Sauce Pasta", "username" : "bhaveshs" }
MongoDB Enterprise atlas-f2e3pi-shard-0:PRIMARY> db.meals.find({"username":"bhaveshs"},{"_id":false})
{ "datetime" : "2020-12-20T16:00:00Z", "food_name" : "pasta", "calorie" : 300, "description" : "Red Sauce Pasta", "username" : "bhaveshs" }
{ "datetime" : "2020-12-21T16:00:00Z", "food_name" : " VEGAN CHICKPEA FRITTATA", "calorie" : 126, "description" : "Calories: 126; Total Fat: 4g; Saturated Fat: 1g; Monounsaturated Fat: 2g; Cholesterol: 0 mg", "username" : "bhaveshs" }
{ "datetime" : "2020-12-22T16:00:00Z", "food_name" : "KETO WALNUT-CASHEW", "calorie" : 291, "description" : "Total Fat: 20g; Saturated Fat: 3g; Monounsaturated Fat: 6g; Cholesterol: 0mg; Sodium: 60mg;", "username" : "bhaveshs" }
{ "datetime" : "2020-12-19T16:00:00Z", "food_name" : " PUMPKIN PIE", "calorie" : 284, "description" : "Total Fat: 5g; Saturated Fat: 1g; Monounsaturated Fat: 1g; Cholesterol: 8mg; Sodium: 231mg; ", "username" : "bhaveshs" }
{ "datetime" : "2020-12-20T16:00:00Z", "food_name" : "SAVORY SWEET POTATO", "calorie" : 200, "description" : "Saturated Fat: 1g; Monounsaturated Fat: 4g; Cholesterol: 0mg; Sodium: 196mg; Carbohydrate: 31g; ", "username" : "bhaveshs" }
{ "datetime" : "2020-12-20T16:00:00Z", "food_name" : "pasta", "calorie" : 300, "description" : "Red Sauce Pasta", "username" : "bhaveshs" }
8.	Write a query to list all meals for a specific user (bhaveshs), on a given date (2020-12-20) , ordered by time.
Query : db.meals.find({"username":"bhaveshs","datetime":/2020-12-20/},{"_id":false}).sort({datetime:1})
Response : { "datetime" : "2020-12-20T16:00:00Z", "food_name" : "pasta", "calorie" : 300, "description" : "Red Sauce Pasta", "username" : "bhaveshs" }
{ "datetime" : "2020-12-20T16:00:00Z", "food_name" : "SAVORY SWEET POTATO", "calorie" : 200, "description" : "Saturated Fat: 1g; Monounsaturated Fat: 4g; Cholesterol: 0mg; Sodium: 196mg; Carbohydrate: 31g; ", "username" : "bhaveshs" }
{ "datetime" : "2020-12-20T16:00:00Z", "food_name" : "pasta", "calorie" : 300, "description" : "Red Sauce Pasta", "username" : "bhaveshs" } 

9.	Write a query which for a specific user (bhaveshs) for a specific date (2020-12-20), returns true if he has exceeded his daily limit and false otherwise (i.e true if sum of calories of all meals on that day > calories_per_day).
 Query  : db.meals.find({"username":"bhaveshs","datetime":/2020-12-20/,"calorie" : { $gt:100 }} ).count() ? true : false
Response : true	


